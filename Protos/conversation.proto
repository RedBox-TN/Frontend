syntax = "proto3";

package redbox_services;

option csharp_namespace = "RedBoxServices";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "shared.proto";

/*
  Messaggi di base che mappano le classi o che vengono utilizzati in altre definizioni.
*/

// mappa la classe Attachment che rappresenta un allegato
message GrpcAttachment {
  // l'id del file
  optional string id = 1;
  // il nome del file
  string name = 2;
  // il contenuto del file
  optional bytes data = 3;
}

// mappa la classe Message che rappresenta un messaggio di una chat o di un gruppo 
message GrpcMessage {
  // l'id del messaggio
  optional string id = 1;
  // la data di invio
  google.protobuf.Timestamp timestamp = 2;
  // l'iv con cui è stato cifrato
  bytes iv = 3;
  // il testo del messaggio, se presente, cifrato con la chiave della chat o del gruppo
  optional bytes encrypted_text = 4;
  // l'id dell'utente che lo ha inviato
  optional string sender_id = 5;
  // l'allegato, se presente
  repeated GrpcAttachment attachments = 6;
}

// mappa la classe Chat che rappresenta una chat tra due utenti
message GrpcChat {
  // l'id della chat
  string id = 1;
  // gli id dei partecipanti
  repeated string members = 2;
  // la data di creazione della chat
  google.protobuf.Timestamp created_at = 3;
  // i messaggi della chat
  repeated GrpcMessage messages = 4;
}

// mappa la classe Group che rappresenta un gruppo tra due o piu' utenti
message GrpcGroup {
  // l'id del gruppo
  string id = 1;
  // il nome del gruppo, non deve essere univoco
  string name = 2;
  //  gli id dei partecipanti
  repeated string members = 3;
  // gli id degli amministratori
  repeated string admins = 4;
  // la data di creazione del gruppo
  google.protobuf.Timestamp created_at = 5;
  // i messaggi del gruppo
  repeated GrpcMessage messages = 6;
}

// contiene l'id di una chat o di un gruppo
message Collection {
  // indica quale collezione si intende cercare, una chat o un gruppo
  oneof name {
    // il nome della chat
    string chat = 1;
    // il nome del gruppo
    string group = 2;
  }
}

// contiene un messaggio e l'id della chat o del gruppo a cui appartiene
message MessageOfCollection {
  // la collezione che contiene i messaggi, chat o gruppo
  Collection collection = 1;
  // il messaggio
  GrpcMessage message = 2;
}

// rappresenta le informazioni di un'utente visibili da tutti
message UserInfo {
  // l'id dell'utente
  string id = 1;
  // lo username dell'utente
  string username = 2;
  // il nome dell'utente
  string name = 3;
  // il cognome dell'utente
  string surname = 4;
  // l'indirizzo email dell'utente
  string email = 5;
  // la biografia dell'utente
  string biography = 6;
}

/*
  Messaggi di richiesta
*/

// richiede la creazione di un gruppo
message GroupCreationRequest {
  // il nome del gruppo, non necessariamente univoco
  string name = 1;
  // gli id dei membri
  repeated string members = 2;
  // gli id degli amministratori
  repeated string admins = 3;
}

// richiede i messaggi di una collezione specifica in chunk, la cui dimensione viene decisa dal server
message MessageChunkRequest {
  // la collezione che contiene i messaggi
  Collection collection = 1;
  // il numero del chunk da recuperare
  int32 chunk = 2;
}

// richiede di contrassegnare uno o più messaggi come cancellati per l'utente corrente
message DeleteMessagesRequest {
  // la collezione in cui è presente il messaggio
  Collection collection = 1;
  // l'id del messaggio da eliminare
  repeated string message_ids = 2;
}

// richiede un allegato, bucket_name è equivalente a collection_name
message AttachmentRequest {
  // il nome del bucket GridFS in cui il file è conservato
  string bucket_name = 1;
  // l'id del file
  string file_id = 2;
}

/*
  Messaggi di risposta
*/

// restituisce una chat contenente i messaggi nel chunk 0
message ChatResponse {
  // il risultato dell'operazione
  shared.Result result = 1;
  // la chat richiesta, con i messaggi contenuti nel chunk 0
  GrpcChat chat = 2;
}

// restituisce più chat con solo i messaggi più recenti; gli altri messaggi vengono recuperati in background
message ChatsResponse {
  // il risultato dell'operazione
  shared.Result result = 1;
  // le chat dell'utente, ognuna con l'ultimo messaggio
  repeated GrpcChat chats = 2;
}

// restituisce un gruppo contenente i messaggi nel chunk 0
message GroupResponse {
  // il risultato dell'operazione
  shared.Result result = 1;
  // il gruppo richiesto
  GrpcGroup group = 2;
}

// restituisce gruppi multipli con solo i messaggi più recenti, gli altri messaggi vengono recuperati in background
message GroupsResponse {
  // il risultato dell'operazione
  shared.Result result = 1;
  // i gruppi di cui l'utente è membro, ognuno con l'ultimo messaggio
  repeated GrpcGroup groups = 2;
}

// restituisce il messaggio nel chunk richiesto
message ChunkResponse {
  // il risultato dell'operazione
  shared.Result result = 1;
  // i messaggi del chunk richiesto, il numero di messaggio è decisa lato server
  repeated GrpcMessage messages = 2;
}

// restituisce agli utenti i dati necessari per la creazione di un nuovo gruppo o di una chat
message AvailableUsersResponse {
  // il risultato dell'operazione
  shared.Result result = 1;
  // le informazioni dell'utente richiesto
  repeated UserInfo users = 2;
}

/*
  Messaggi di Sync
*/

// rappresenta un'azione del client, come l'invio o la cancellazione di un messaggio o la creazione di una conversazione
message ClientUpdate {
  // l'operazione richiesta
  oneof operation {
    // invio di un nuovo messaggio
    MessageOfCollection sent_message = 1;
    // la cancellazione di un messaggio
    DeleteMessagesRequest deleted_messages = 2;
    // il recupero dei dettagli di una conversazione
    Collection get_collection_details = 3;
  }
}

// rappresenta un update del server, per il client, come un nuovo messaggio o una nuova conversazione
message ServerUpdate {
  // il risultato dell'operazione
  shared.Result result = 1;
  // l'operazione effettuata
  oneof operation {
    // il client ha ricevuto un nuovo messaggio
    MessageOfCollection received_message = 2;
    // il client ha richiesto o è stato aggiunto ad una nuova chat
    GrpcChat chat = 3;
    // il client ha richiesto o è stato aggiunto ad un nuovo gruppo
    GrpcGroup group = 4;
    // il client deve eliminare dei messaggi
    DeleteMessagesRequest deleted_messages = 5;
  }
}

// servizi per le chat e i gruppi
service GrpcConversationServices {
  // ottiene la definizione di un gruppo partendo dall id e l'ultimo blocco di messaggi (la dimensione è decisa dal server)
  rpc GetUserGroupFromId (shared.StringMessage) returns (GroupResponse);
  // ottiene tutti i gruppi di cui l'utente è membro
  rpc GetAllUserGroups (google.protobuf.Empty) returns (GroupsResponse);
  // crea un gruppo con gli utenti selezionati
  rpc CreateGroup (GroupCreationRequest) returns (GroupResponse);

  // crea una nuova chat tra utenti singoli
  rpc CreateChat (shared.StringMessage) returns (ChatResponse);
  // ottiene la definizione della chat partendo dall'id e l'ultimo blocco di messaggi (la dimensione è decisa dal server)
  rpc GetChatFromId (shared.StringMessage) returns (ChatResponse);
  // ottiene la definizione di ogni chat di cui l'utente è membro
  rpc GetAllUserOwnChats (google.protobuf.Empty) returns (ChatsResponse);

  // ottiene tutti gli utenti con cui è possibile iniziare una chat
  rpc GetUsersForConversation(google.protobuf.Empty) returns (AvailableUsersResponse);
  // ottiene i messaggi di un gruppo o una chat, in blocchi di dimensione fissata dal server
  rpc GetMessagesInRange (MessageChunkRequest) returns (ChunkResponse);
  // ottiene il contenuto di un allegato
  rpc GetAttachmentData (AttachmentRequest) returns (GrpcAttachment);
  // mantiene i client sincronizzati col server
  rpc Sync (stream ClientUpdate) returns (stream ServerUpdate);
}

// servizi per la letture delle chat da parte dei supervisori
service GrpcSupervisedConversationService {
  // ottiene tutte le chat supervisionate, ognuna con l'ultimo messaggio inviato
  rpc GetAllChats (google.protobuf.Empty) returns (ChatsResponse);
  // ottiene tutti i gruppi supervisionati, ognuno con l'ultimo messaggio inviato
  rpc GetAllGroups (google.protobuf.Empty) returns (GroupsResponse);
  // recupera i messaggi di un gruppo o una chat, in blocchi di dimensione fissata dal server
  rpc GetMessagesInRange (MessageChunkRequest) returns (ChunkResponse);
  // ottiene il contenuto di un allegato
  rpc GetAttachmentData (AttachmentRequest) returns (GrpcAttachment);
}