@page "/"
@using Frontend.Models
@using Microsoft.AspNetCore.Components.Forms
@using RedBoxAuthentication
@using Frontend.Client_Utility
@using System.Text.RegularExpressions
@inject AuthenticationGrpcService.AuthenticationGrpcServiceClient AuthApi
@inject ClientUtility ClientUtility

<EditForm Model="@_userModel" OnValidSubmit="@Login">
    <DataAnnotationsValidator/>
    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" @bind-Value="_userModel.UsernameEmail" class="form-control"/>
        <ValidationMessage For="() => _userModel.UsernameEmail"/>
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="_userModel.Password" class="form-control"/>
        <ValidationMessage For="() => _userModel.Password"/>
    </div>
    <button type="submit" class="ui button">Submit</button>
</EditForm>

<p>
    Status: @_status
</p>

@code {

    string? _token;
    string? _status;

    readonly User _userModel = new User
    {
        UsernameEmail = null,
        Password = null
    };

    private async Task Login()
    {
        LoginRequest request;
        if (new Regex(@"^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$").IsMatch(_userModel.UsernameEmail))
        {
            request = new LoginRequest
            {
                Email = _userModel.UsernameEmail,
                Password = _userModel.Password
            };
        }
        else
        {
            request = new LoginRequest
            {
                Username = _userModel.UsernameEmail,
                Password = _userModel.Password
            };
        }

        var res = await AuthApi.LoginAsync(request);
        _token = res.Token;
        _status = res.Status.ToString();
        if (!string.IsNullOrEmpty(_token)) ClientUtility.SetAuthToken(_token);
    }

}