@page "/"
@using RedBoxServices
@using Shared
@using Frontend.Client_Utility
@using Google.Protobuf.WellKnownTypes
@inject ClientUtility ClientUtility
@inject GrpcAccountServices.GrpcAccountServicesClient UserService
@inject GrpcConversationServices.GrpcConversationServicesClient ConversationServices
@inject NavigationManager NavigationManager


<head>
	<title>Messages</title>
</head>

@if (_isError)
{
	<div class="ui negative message">
		<i class="close icon"></i>
		<div class="header">
			@_errorTitle
		</div>
		<p>
			@_errorMessage
		</p>
	</div>
}
else if (_showNoUserFound)
{
	<div class="ui info message">
		<i class="close icon"></i>
		<div class="header">
			Non ci sono utenti con cui iniziare una conversazione
		</div>
		Aspetta che nuovi utenti vengano aggiunti all'applicazione
	</div>
}
<div class="ui top attached tabular menu">
	<a class="active item" data-tab="d1">
		Home
	</a>
	<a class="item" data-tab="d2" @onclick="FetchUsers">
		Nuova Chat
	</a>
	<div class="right menu">
		<div class="item">
			<div class="ui transparent icon input">
				<input type="text" placeholder="Search users...">
				<i class="search link icon"></i>
			</div>
		</div>
	</div>
</div>
<div class="ui bottom attached tab segment active" data-tab="d1">
	<button @onclick="GetChats">Get Chats</button>
	<div class="results">
		<div class="ui sidebar inverted vertical menu">
			@foreach (var c in _foundChats)
			{
				<a class="item" id="@c.Id">@c.Members[0]</a>
			}
		</div>
	</div>
</div>
<div class="ui bottom attached tab segment" data-tab="d2">
	<div>
		<div class="ui list">
			@foreach (var u in _foundUsers)
			{
				<div class="item" @onclick="() => CreateChat(u.Id)">
					<i class="huge user circle outline icon"></i>
					<div class="content">
						<a class="header">@u.Name @u.Surname</a>
						<div class="description">
							<p>@u.Username: @u.Biography</p>
						</div>
					</div>
				</div>
			}
		</div>
	</div>
</div>

@code {
	bool _isError, _showNoUserFound;
	string _errorTitle, _errorMessage;
	List<UserInfo> _foundUsers = new();
	GrpcChat[] _foundChats = Array.Empty<GrpcChat>();

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		if (!ClientUtility.IsLoggedIn())
			NavigationManager.NavigateTo("/Login");
	}

	// Function callend on every dynamic update
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await JsRuntime.InvokeVoidAsync("closeMessages");
	}

	private async Task FetchUsers()
	{
		var response = await ConversationServices.GetUsersForConversationAsync(new Empty());
		switch (response.Result.Status)
		{
			case Status.Ok:
				if (response.Users.Count > 0)
				{
					_foundUsers = response.Users.ToList();
				}
				else
				{
					_showNoUserFound = true;
				}
				break;
			case Status.Error:
				_isError = true;
				_errorTitle = "Errore del backend";
				_errorMessage = response.Result.Error;
				break;
			case Status.MissingParameters:
				_isError = true;
				_errorTitle = "Paramentri mancanti";
				_errorMessage = "la richiesta inviata Ã¨ incompleta";
				break;
			case Status.AttachmentTooBig:
				_isError = true;
				_errorTitle = "Messaggio troppo pesante";
				_errorMessage = "il messaggio inviato supera la dimensione massima consentita";
				break;
			case Status.InvalidParameter:
				_isError = true;
				_errorTitle = "Paramentri invalidi";
				_errorMessage = "la richiesta inviata contine parametri invalidi";
				break;
			default:
				throw new ArgumentOutOfRangeException();
		}
	}

	private async Task CreateChat(string userId)
	{
		var response = await ConversationServices.CreateChatAsync(new StringMessage
		{
			Value = userId
		});

		switch (response.Result.Status)
		{
			case Status.Ok:
				_foundUsers.Remove(_foundUsers.Find(u => u.Id == userId)!);
				break;
			case Status.Error:
				_isError = true;
				_errorTitle = "Impossibile creare la chat";
				_errorMessage = response.Result.Error;
				break;
			case Status.MissingParameters:
				_isError = true;
				_errorTitle = "Impossibile creare la chat";
				_errorMessage = "La richiesta non contiene tutti i parametri richiesti";
				break;
			case Status.AttachmentTooBig:
				_isError = true;
				_errorTitle = "Impossibile creare la chat";
				_errorMessage = "La richiesta era troppo pesante";
				break;
			case Status.InvalidParameter:
				_isError = true;
				_errorTitle = "Impossibile creare la chat";
				_errorMessage = "La richiesta contiene dei paramentri non validi";
				break;
			default:
				throw new ArgumentOutOfRangeException();
		}
	}

	private async Task GetChats()
	{
		var response = await ConversationServices.GetAllUserOwnChatsAsync(new Empty());
		switch (response.Result.Status)
		{
			case Status.Ok:
				_foundChats = response.Chats.ToArray();
				break;
			case Status.Error:
				break;
			case Status.MissingParameters:
				break;
			case Status.AttachmentTooBig:
				break;
			case Status.InvalidParameter:
				break;
			default:
				throw new ArgumentOutOfRangeException();
		}
	}

}