@page "/Messages"
@using RedBoxServices
@using Shared
@using Frontend.Client_Utility
@using Google.Protobuf.WellKnownTypes
@inject ClientUtility ClientUtility
@inject GrpcAccountServices.GrpcAccountServicesClient UserService
@inject GrpcConversationServices.GrpcConversationServicesClient ConversationServices

<head>
    <title>Messages</title>
    <script>
        $(document).ready(function () {
            // Inizializza il menu tabulato
            $('.menu .item').tab();
        });
    </script>
</head>

<div class="ui top attached tabular menu">
    <a class="active item" data-tab="d1">
        Home
    </a>
    <a class="item" data-tab="d2">
        Nuova Chat
    </a>
    <div class="right menu">
        <div class="item">
            <div class="ui transparent icon input">
                <input type="text" placeholder="Search users...">
                <i class="search link icon"></i>
            </div>
        </div>
    </div>
</div>
<div class="ui bottom attached tab segment active" data-tab="d1">
    <button @onclick="GetChats">Get Chats</button>
    <div class="results">
        @if (_chats is not null)
        {
            @foreach (var c in _chats.Chats)
            {
                <p id="@c.Id">@c.Members[0]</p>
            }
        }
    </div>
</div>
<div class="ui bottom attached tab segment" data-tab="d2">
    <div>
        @if (_user is not null)
        {
            @foreach (var u in _user.User)
            {
                <p id="@u.Id" @onclick="() => AddUser(u)" style="cursor: pointer">@u.Username</p>
            }
        }
    </div>
    <button @onclick="FetchUsers" class="ui button">Fetch Users</button>
    <button @onclick="CreateChat" class="ui button">Create Chat</button>
</div>

@inject NavigationManager NavigationManager

@code {
    GrpcUserResults? _user = new();
    readonly List<string> _userList = new();
    ChatsResponse? _chats = new();
    readonly List<GrpcChat> _chatsList = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!ClientUtility.IsLoggedIn())
            NavigationManager.NavigateTo("/");
    }

    private async Task FetchUsers()
    {
        _user = await UserService.FetchAllUsersAsync(new Empty());
    }

    private Task AddUser(GrpcUser u)
    {
        _userList.Add(u.Id);
        _user?.User.Remove(u);
        return Task.CompletedTask;
    }

    private async Task CreateChat()
    {
        foreach (var id in _userList)
        {
            var req = new StringMessage
            {
                Value = id
            };
            var res = await ConversationServices.CreateChatAsync(req);
        }
    }

    private async Task GetChats()
    {
        _chats = await ConversationServices.GetAllUserOwnChatsAsync(new Empty());
    }

}