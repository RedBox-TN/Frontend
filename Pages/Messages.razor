@page "/Messages"
@using RedBoxServices
@using Shared
@using Google.Protobuf.Collections
@using Google.Protobuf.WellKnownTypes
@using Frontend.Client_Utility
@inject ClientUtility ClientUtility
@inject GrpcAccountServices.GrpcAccountServicesClient UserService
@inject GrpcConversationServices.GrpcConversationServicesClient ConversationServices

<head>
    <title>Messages</title>
    <script suppress-error="BL9992">
            $(document).ready(function () {
                // Inizializza il menu tabulato
                $('.menu .item').tab();
            });
    </script>
</head>
@if (_isError)
{
    <div class="ui negative message">
        <div class="header">
            @_errorTitle
        </div>
        <p>
            @_errorMessage
        </p>
    </div>
}
else if (_showNoUserFound && _users.Count == 0)
{
    <div class="ui info message">
        <div class="header">
            Non ci sono utenti con cui iniziare una conversazione
        </div>
        Aspetta che nuovi utenti vengano aggiunti all'applicazione
    </div>
}
<div class="ui top attached tabular menu">
    <a class="active item" data-tab="d1">
        Home
    </a>
    <a class="item" data-tab="d2">
        Nuova Chat
    </a>
    <div class="right menu">
        <div class="item">
            <div class="ui transparent icon input">
                <input type="text" placeholder="Search users...">
                <i class="search link icon"></i>
            </div>
        </div>
    </div>
</div>
<div class="ui bottom attached tab segment active" data-tab="d1">
    <button @onclick="GetChats">Get Chats</button>
    <div class="results">
        @if (_chats is not null)
        {
            <div class="ui sidebar inverted vertical menu">
                @foreach (var c in _chats.Chats)
                {
                    <a class="item" id="@c.Id">@c.Members[0]</a>
                }
            </div>
        }
        else
        {
            _showNoUserFound = true;
        }
    </div>
</div>
<div class="ui bottom attached tab segment" data-tab="d2">
    <div>
        <div class="ui list">
            @if (_users.Count > 0)
            {
                @foreach (var u in _users)
                {
                    <div class="item" @onclick="() => CreateChat(u.Id)">
                        <i class="huge user circle outline icon"></i>
                        <div class="content">
                            <a class="header">@u.Name @u.Surname</a>
                            <div class="description">
                                <p>Username: @u.Username</p>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    <button @onclick="FetchUsers" class="ui button">Fetch Users</button>
</div>

@inject NavigationManager NavigationManager

@code {
    bool _isError, _showNoUserFound;
    string _errorTitle, _errorMessage;
    RepeatedField<UserInfo> _users = new();
    ChatsResponse? _chats = new();
    readonly List<GrpcChat> _chatsList = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!ClientUtility.IsLoggedIn())
            NavigationManager.NavigateTo("/");
    }

    private async Task FetchUsers()
    {
        var response = await ConversationServices.GetUsersForConversationAsync(new Empty());
        switch (response.Result.Status)
        {
            case Status.Ok:
                _users = response.Users;
                break;
            case Status.Error:
                _isError = true;
                _errorTitle = "Errore del backend";
                _errorMessage = response.Result.Error;
                break;
            case Status.MissingParameters:
                _isError = true;
                _errorTitle = "Paramentri mancanti";
                _errorMessage = "la richiesta inviata Ã¨ incompleta";
                break;
            case Status.AttachmentTooBig:
                _isError = true;
                _errorTitle = "Messaggio troppo pesante";
                _errorMessage = "il messaggio inviato supera la dimensione massima consentita";
                break;
            case Status.InvalidParameter:
                _isError = true;
                _errorTitle = "Paramentri invalidi";
                _errorMessage = "la richiesta inviata contine parametri invalidi";
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private async Task CreateChat(string userId)
    {
        var response = await ConversationServices.CreateChatAsync(new StringMessage
        {
            Value = userId
        });

        switch (response.Result.Status)
        {
            case Status.Ok:
                break;
            case Status.Error:
                break;
            case Status.MissingParameters:
                break;
            case Status.AttachmentTooBig:
                break;
            case Status.InvalidParameter:
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private async Task GetChats()
    {
        _chats = await ConversationServices.GetAllUserOwnChatsAsync(new Empty());
    }

}